# -*- coding: utf-8 -*-
# Conventions are according to NumPy Docstring.

"""
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""

import time
import sys

MAX_RUN_TIME = 30

def main():
    # given variables
    aLo, aHi = 2, 100
    bLo, bHi = 2, 100
    # initialize running time
    timerStart = time.time()
    # create set of distinct terms
    distinctTerms = set()
    for a in range(aLo, aHi + 1):
        ##########################################################
        if (time.time() - timerStart > MAX_RUN_TIME):
            sys.exit("Maximum runtime exceeded. Script aborted.")
        ##########################################################
        for b in range(bLo, bHi + 1):
            distinctTerms.add(a ** b)
    result = len(distinctTerms)
    # finalize running time
    timerStop = time.time()
    # print results
    title = "Distinct a^b Terms for 2 <= a <= 100 and 2 <= b <= 100"
    print title
    print "-" * len(title)
    print "Result \t\t : %s" %(result)
    print "Running Time \t : %.4f sec" %(timerStop - timerStart)


if __name__ == '__main__':
    main()
