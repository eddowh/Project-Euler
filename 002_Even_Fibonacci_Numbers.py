"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

import time

def fib(n, memo_dict):
    """
    Memoized Fibonacci function
    """
    if n in memo_dict:
        return memo_dict[n]
    else:
        sum1 = fib(n - 1, memo_dict)
        sum2 = fib(n - 2, memo_dict)
        sum_total = sum1 + sum2
        memo_dict[n] = sum_total
        return sum_total

if __name__ == '__main__':
    # input value
    upper_limit = 4 * (10 ** 6)
    # stop until it exceeds upper limit
    start = time.time()
    fib_memo_dict = {1:1, 2:2}
    i = 1
    current_fib_num = fib_memo_dict[i]
    while (current_fib_num < upper_limit):
        if (time.time() - start > 1):
            raise Exception("Timeout: Running of script aborted.")
            break
        i += 1
        current_fib_num = fib(i, fib_memo_dict)
    even_fibs = filter(lambda x: x % 2 == 0, fib_memo_dict.values())
    print sum(even_fibs)
    stop = time.time()
    print "Running Time: ", "%.2f" %(stop - start)
